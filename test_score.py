import unittest
from score import score, Picks

class ScoreTest(unittest.TestCase):

    # P1-P20
    results = [
        "A", "B", "C", "D", "E", 
        "F", "G", "H", "I", "J",
        "K", "L", "M", "N", "O",
        "P", "Q", "R", "S", "T"
    ]

    def test_score_correct(self):
        predictions = [
            Picks("p1", ["A", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p2", ["1", "B", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p3", ["1", "2", "C", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p4", ["1", "2", "3", "D", "5", "6", "7", "8", "9", "10"]),
            Picks("p5", ["1", "2", "3", "4", "E", "6", "7", "8", "9", "10"]),
            Picks("p6", ["1", "2", "3", "4", "5", "F", "7", "8", "9", "10"]),
            Picks("p7", ["1", "2", "3", "4", "5", "6", "G", "8", "9", "10"]),
            Picks("p8", ["1", "2", "3", "4", "5", "6", "7", "H", "9", "10"]),
            Picks("p9", ["1", "2", "3", "4", "5", "6", "7", "8", "I", "10"]),
            Picks("p10", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "J"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 25)
    

    def test_score_one_off(self):
        predictions = [
            Picks("p1", ["1", "A", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p2", ["1", "2", "B", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p3", ["1", "2", "3", "C", "5", "6", "7", "8", "9", "10"]),
            Picks("p4", ["1", "2", "3", "4", "D", "6", "7", "8", "9", "10"]),
            Picks("p5", ["1", "2", "3", "4", "5", "E", "7", "8", "9", "10"]),
            Picks("p6", ["1", "2", "3", "4", "5", "6", "F", "8", "9", "10"]),
            Picks("p7", ["1", "2", "3", "4", "5", "6", "7", "G", "9", "10"]),
            Picks("p8", ["1", "2", "3", "4", "5", "6", "7", "8", "H", "10"]),
            Picks("p9", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "I"]),
            Picks("p10", ["1", "2", "3", "4", "5", "6", "7", "8", "J", "10"]),
            Picks("p11", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "K"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 18)


    def test_score_two_off(self):
        predictions = [
            Picks("p1", ["1", "2", "A", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p2", ["1", "2", "3", "B", "5", "6", "7", "8", "9", "10"]),
            Picks("p3", ["1", "2", "3", "4", "C", "6", "7", "8", "9", "10"]),
            Picks("p4", ["1", "2", "3", "4", "5", "D", "7", "8", "9", "10"]),
            Picks("p5", ["1", "2", "3", "4", "5", "6", "E", "8", "9", "10"]),
            Picks("p6", ["1", "2", "3", "4", "5", "6", "7", "F", "9", "10"]),
            Picks("p7", ["1", "2", "3", "4", "5", "6", "7", "8", "G", "10"]),
            Picks("p8", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "H"]),
            Picks("p9", ["1", "2", "3", "4", "5", "6", "I", "8", "9", "10"]),
            Picks("p10", ["1", "2", "3", "4", "5", "6", "7", "J", "9", "10"]),
            Picks("p11", ["1", "2", "3", "4", "5", "6", "7", "8", "K", "10"]),
            Picks("p12", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "L"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 15)


    def test_score_three_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "A", "5", "6", "7", "8", "9", "10"]),
            Picks("p2", ["1", "2", "3", "4", "B", "6", "7", "8", "9", "10"]),
            Picks("p3", ["1", "2", "3", "4", "5", "C", "7", "8", "9", "10"]),
            Picks("p4", ["1", "2", "3", "4", "5", "6", "D", "8", "9", "10"]),
            Picks("p5", ["1", "2", "3", "4", "5", "6", "7", "E", "9", "10"]),
            Picks("p6", ["1", "2", "3", "4", "5", "6", "7", "8", "F", "10"]),
            Picks("p7", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "G"]),
            Picks("p8", ["1", "2", "3", "4", "H", "6", "7", "8", "9", "10"]),
            Picks("p9", ["1", "2", "3", "4", "5", "I", "7", "8", "9", "10"]),
            Picks("p10", ["1", "2", "3", "4", "5", "6", "J", "8", "9", "10"]),
            Picks("p11", ["1", "2", "3", "4", "5", "6", "7", "K", "9", "10"]),
            Picks("p12", ["1", "2", "3", "4", "5", "6", "7", "8", "L", "10"]),
            Picks("p13", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "M"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 12)
    

    def test_score_four_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "A", "6", "7", "8", "9", "10"]),
            Picks("p2", ["1", "2", "3", "4", "5", "B", "7", "8", "9", "10"]),
            Picks("p3", ["1", "2", "3", "4", "5", "6", "C", "8", "9", "10"]),
            Picks("p4", ["1", "2", "3", "4", "5", "6", "7", "D", "9", "10"]),
            Picks("p5", ["1", "2", "3", "4", "5", "6", "7", "8", "E", "10"]),
            Picks("p6", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "F"]),
            Picks("p7", ["1", "2", "G", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p8", ["1", "2", "3", "H", "5", "6", "7", "8", "9", "10"]),
            Picks("p9", ["1", "2", "3", "4", "I", "6", "7", "8", "9", "10"]),
            Picks("p10", ["1", "2", "3", "4", "5", "J", "7", "8", "9", "10"]),
            Picks("p11", ["1", "2", "3", "4", "5", "6", "K", "8", "9", "10"]),
            Picks("p12", ["1", "2", "3", "4", "5", "6", "7", "L", "9", "10"]),
            Picks("p13", ["1", "2", "3", "4", "5", "6", "7", "8", "M", "10"]),
            Picks("p14", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "N"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 10)


    def test_score_five_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "5", "A", "7", "8", "9", "10"]),
            Picks("p2", ["1", "2", "3", "4", "5", "6", "B", "8", "9", "10"]),
            Picks("p3", ["1", "2", "3", "4", "5", "6", "7", "C", "9", "10"]),
            Picks("p4", ["1", "2", "3", "4", "5", "6", "7", "8", "D", "10"]),
            Picks("p5", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "E"]),
            Picks("p6", ["F", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p7", ["1", "G", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p8", ["1", "2", "H", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p9", ["1", "2", "3", "I", "5", "6", "7", "8", "9", "10"]),
            Picks("p10", ["1", "2", "3", "4", "J", "6", "7", "8", "9", "10"]),
            Picks("p11", ["1", "2", "3", "4", "5", "K", "7", "8", "9", "10"]),
            Picks("p12", ["1", "2", "3", "4", "5", "6", "L", "8", "9", "10"]),
            Picks("p13", ["1", "2", "3", "4", "5", "6", "7", "M", "9", "10"]),
            Picks("p14", ["1", "2", "3", "4", "5", "6", "7", "8", "N", "10"]),
            Picks("p15", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "O"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 8)
    

    def test_score_six_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "5", "6", "A", "8", "9", "10"]),
            Picks("p2", ["1", "2", "3", "4", "5", "6", "7", "B", "9", "10"]),
            Picks("p3", ["1", "2", "3", "4", "5", "6", "7", "8", "C", "10"]),
            Picks("p4", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "D"]),
            Picks("p7", ["G", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p8", ["1", "H", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p9", ["1", "2", "I", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p10", ["1", "2", "3", "J", "5", "6", "7", "8", "9", "10"]),
            Picks("p11", ["1", "2", "3", "4", "K", "6", "7", "8", "9", "10"]),
            Picks("p12", ["1", "2", "3", "4", "5", "L", "7", "8", "9", "10"]),
            Picks("p13", ["1", "2", "3", "4", "5", "6", "M", "8", "9", "10"]),
            Picks("p14", ["1", "2", "3", "4", "5", "6", "7", "N", "9", "10"]),
            Picks("p15", ["1", "2", "3", "4", "5", "6", "7", "8", "O", "10"]),
            Picks("p16", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "P"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 6)
    

    def test_score_seven_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "5", "6", "7", "A", "9", "10"]),
            Picks("p2", ["1", "2", "3", "4", "5", "6", "7", "8", "B", "10"]),
            Picks("p3", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "C"]),
            Picks("p8", ["H", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p9", ["1", "I", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p10", ["1", "2", "J", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p11", ["1", "2", "3", "K", "5", "6", "7", "8", "9", "10"]),
            Picks("p12", ["1", "2", "3", "4", "L", "6", "7", "8", "9", "10"]),
            Picks("p13", ["1", "2", "3", "4", "5", "M", "7", "8", "9", "10"]),
            Picks("p14", ["1", "2", "3", "4", "5", "6", "N", "8", "9", "10"]),
            Picks("p15", ["1", "2", "3", "4", "5", "6", "7", "O", "9", "10"]),
            Picks("p16", ["1", "2", "3", "4", "5", "6", "7", "8", "P", "10"]),
            Picks("p17", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "Q"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 4)
    

    def test_score_eight_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "5", "6", "7", "8", "A", "10"]),
            Picks("p2", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "B"]),
            Picks("p9", ["I", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p10", ["1", "J", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p11", ["1", "2", "K", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p12", ["1", "2", "3", "L", "5", "6", "7", "8", "9", "10"]),
            Picks("p13", ["1", "2", "3", "4", "M", "6", "7", "8", "9", "10"]),
            Picks("p14", ["1", "2", "3", "4", "5", "N", "7", "8", "9", "10"]),
            Picks("p15", ["1", "2", "3", "4", "5", "6", "O", "8", "9", "10"]),
            Picks("p16", ["1", "2", "3", "4", "5", "6", "7", "P", "9", "10"]),
            Picks("p17", ["1", "2", "3", "4", "5", "6", "7", "8", "Q", "10"]),
            Picks("p18", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "R"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 2)
    

    def test_score_nine_off(self):
        predictions = [
            Picks("p1", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "A"]),
            Picks("p10", ["J", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p11", ["1", "K", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p12", ["1", "2", "L", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p13", ["1", "2", "3", "M", "5", "6", "7", "8", "9", "10"]),
            Picks("p14", ["1", "2", "3", "4", "N", "6", "7", "8", "9", "10"]),
            Picks("p15", ["1", "2", "3", "4", "5", "O", "7", "8", "9", "10"]),
            Picks("p16", ["1", "2", "3", "4", "5", "6", "P", "8", "9", "10"]),
            Picks("p17", ["1", "2", "3", "4", "5", "6", "7", "Q", "9", "10"]),
            Picks("p18", ["1", "2", "3", "4", "5", "6", "7", "8", "R", "10"]),
            Picks("p19", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "S"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 1)


    def test_score_no_points(self):
        predictions = [
            Picks("nada", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p11", ["K", "2", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p12", ["1", "L", "3", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p13", ["1", "2", "M", "4", "5", "6", "7", "8", "9", "10"]),
            Picks("p14", ["1", "2", "3", "N", "5", "6", "7", "8", "9", "10"]),
            Picks("p15", ["1", "2", "3", "4", "O", "6", "7", "8", "9", "10"]),
            Picks("p16", ["1", "2", "3", "4", "5", "P", "7", "8", "9", "10"]),
            Picks("p17", ["1", "2", "3", "4", "5", "6", "Q", "8", "9", "10"]),
            Picks("p18", ["1", "2", "3", "4", "5", "6", "7", "R", "9", "10"]),
            Picks("p19", ["1", "2", "3", "4", "5", "6", "7", "8", "S", "10"]),
            Picks("p19", ["1", "2", "3", "4", "5", "6", "7", "8", "9", "T"])
        ]

        for p in predictions:
            with self.subTest(p.name):
                result = score(self.results, p)
                self.assertEqual(result.calculate(), 0)
    

    def test_score_combo(self):
        p = Picks("blackmichael", [
            "B", # P1. off by 1     - 18
            "A", # P2. off by 1     - 18
            "C", # P3. correct      - 25
            "T", # P4. off by a lot - 0
            "G", # P5. off by 2     - 15
            "F", # P6. correct      - 25
            "J", # P7. off by 3     - 12
            "M", # P8. off by 5     - 8
            "E", # P9. off by 4     - 10 
            "K" # P10. off by 1     - 18 
        ])

        # sum of the above
        expected = 149

        result = score(self.results, p)
        self.assertEqual(result.calculate(), expected)


if __name__ == "__main__":
    unittest.main()
